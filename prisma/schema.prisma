// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// CAMADA 1: ORIGEM DOS DADOS (Imutável)
// ============================================================================

// Metadados dos arquivos CSV importados
model ArquivoImportado {
  id            String   @id @default(uuid())
  nomeArquivo   String
  tipo          String   // 'alunos', 'notas', etc
  dataDownload  DateTime? // Data de download do sistema original (se disponível)
  dataUpload    DateTime @default(now())
  hashArquivo   String   @unique // Para detectar duplicatas
  status        String   @default("ativo") // 'ativo', 'excluido', 'substituido'

  // Metadados de exclusão
  excluidoEm    DateTime?
  excluidoPor   String?
  observacao    String?  @db.Text

  // Relacionamentos
  linhas        LinhaImportada[]

  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([hashArquivo])
  @@index([dataUpload])
  @@index([status])
  @@map("arquivos_importados")
}

// Cada linha de CSV importada (JSONB imutável)
model LinhaImportada {
  id                  String   @id @default(uuid())
  arquivoId           String
  numeroLinha         Int
  dadosOriginais      Json     // JSONB com todos os campos como vieram do CSV
  identificadorChave  String?  // Matrícula, código da turma, etc
  tipoEntidade        String   // 'aluno', 'turma', 'nota', etc

  // Relacionamentos
  arquivo             ArquivoImportado @relation(fields: [arquivoId], references: [id], onDelete: Cascade)
  alunos              Aluno[]
  enturmacoes         Enturmacao[]

  // Timestamps
  createdAt           DateTime @default(now())

  @@index([arquivoId])
  @@index([identificadorChave])
  @@index([tipoEntidade])
  @@map("linhas_importadas")
}

// ============================================================================
// CAMADA 2: ENTIDADES ESTRUTURADAS (Editáveis)
// ============================================================================

// Aluno - Tabela principal estruturada
model Aluno {
  id                    String   @id @default(uuid())
  matricula             String   @unique @db.VarChar(15)

  // Dados cadastrais
  nome                  String?  @db.VarChar(200)
  sexo                  String?  @db.VarChar(1)
  dataNascimento        DateTime? @db.Date
  nacionalidade         String?  @db.VarChar(50)
  naturalidade          String?  @db.VarChar(100)
  uf                    String?  @db.VarChar(2)
  rg                    String?  @db.VarChar(20)
  rgOrgaoEmissor        String?  @db.VarChar(20)
  rgDataEmissao         DateTime? @db.Date
  cpf                   String?  @db.VarChar(14)
  nomeMae               String?  @db.VarChar(200)
  nomePai               String?  @db.VarChar(200)

  // Dados escolares
  dataConclusaoEnsinoMedio  DateTime? @db.Date

  // Dados do Ensino Fundamental
  efInstituicao         String?  @db.VarChar(200)
  efMunicipioEstado     String?  @db.VarChar(100)
  efAnoConclusao        Int?
  efNumeroPagina        String?  @db.VarChar(20)
  efDataEmissao         DateTime? @db.Date

  // Campos adicionais (não vêm do CSV)
  dadosConferidos       Boolean  @default(false)
  conferidoEm           DateTime?
  conferidoPor          String?
  certificacao          Boolean  @default(false)
  observacoes           String?  @db.VarChar(1000)

  // Metadados de origem
  origemTipo            String   // 'csv' ou 'manual'
  linhaOrigemId         String?  // FK para LinhaImportada (null se manual)
  fonteAusente          Boolean  @default(false)
  fonteAusenteCiente    Boolean  @default(false)

  // Relacionamentos
  linhaOrigem           LinhaImportada? @relation(fields: [linhaOrigemId], references: [id], onDelete: SetNull)
  enturmacoes           Enturmacao[]

  // Auditoria
  criadoEm              DateTime @default(now())
  criadoPor             String?
  atualizadoEm          DateTime @updatedAt
  atualizadoPor         String?

  @@index([matricula])
  @@index([nome])
  @@index([origemTipo])
  @@index([fonteAusente])
  @@map("alunos")
}

// Enturmação - Registros dos períodos letivos estudados pelo aluno na escola
model Enturmacao {
  id                String   @id @default(uuid())
  alunoId           String

  // Identificação do período letivo estudado na escola
  anoLetivo         String   @db.VarChar(10)
  regime            Int      @default(0) // 0=anual, 1=1º semestre, 2=2º semestre
  modalidade        String   @db.VarChar(100)
  turma             String   @db.VarChar(50)
  serie             String   @db.VarChar(10)
  turno             String?  @db.VarChar(20)

  // Metadados de origem
  origemTipo        String   // 'csv' ou 'manual'
  linhaOrigemId     String?

  // Relacionamentos
  aluno             Aluno              @relation(fields: [alunoId], references: [id], onDelete: Cascade)
  linhaOrigem       LinhaImportada?    @relation(fields: [linhaOrigemId], references: [id], onDelete: SetNull)

  // Timestamps
  criadoEm          DateTime @default(now())
  atualizadoEm      DateTime @updatedAt

  @@index([alunoId])
  @@index([anoLetivo])
  @@index([modalidade])
  @@index([turma])
  @@map("enturmacoes")
}

// ============================================================================
// CAMADA 3: AUDITORIA
// ============================================================================

// Registro automático de todas as mudanças
model Auditoria {
  id              String   @id @default(uuid())
  tabela          String   @db.VarChar(50)
  registroId      String
  operacao        String   @db.VarChar(10) // 'INSERT', 'UPDATE', 'DELETE'
  dadosAntes      Json?
  dadosDepois     Json?
  camposAlterados String[] // Array com nomes dos campos que mudaram
  usuarioId       String?
  timestamp       DateTime @default(now())

  @@index([tabela, registroId])
  @@index([timestamp])
  @@index([usuarioId])
  @@map("auditoria")
}
